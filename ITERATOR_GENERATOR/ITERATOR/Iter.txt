Итератор (iterator, англ. перечислитель) – это такой объект, который позволяет перебирать элементы контейнера,
переходя от одного элемента – к другому
Итератор - объект, который поддерживает функцию next() Помнит о том, каой элемент будит браться следующим

Концептуально, итератор — это механизм поэлементного обхода данных,
а генератор позволяет отложено создавать результат при итерации на основе какого то алгоритма или брать элементы из
источника данных(коллекция, файлы, сетевое подключения и пр) и изменять их.

Генератор - итератор, элементы которого можно итерировать только один раз
Ярким пример являются функции range и enumerate:

range генерирует ограниченную арифметическую прогрессию целых чисел, не используя никакой источник данных.
enumerate генерирует двухэлементные кортежи с индексом и одним элементом из итерируемого объекта.

Любая функция в Python, в теле которой встречается ключевое слово yield,
называется генераторной функцией — при вызове она возвращает объект-генератор.



Итерируемый объект - объект, который предоставляет возможность обойти поочередно свои элементы.
Может быть преобразован к итератору.


iter() имеет два варианта использования.
В первом она принимает всего один аргумент, который должен "уметь" предоставлять свой итератор.
Во втором один из аргументов - функция без аргументов, другой - стоповое значение.

Итератор вызывает указанную функцию до тех пор, пока та не возвратит стоповое значение.
Второй вариант встречается много реже первого и обычно внутри метода класса,
так как сложно порождать значения "на пустом месте":

Основное место использования итераторов – это цикл for. Если вы перебираете элементы
в некотором списке или символы в строке с помощью цикла for, то ,фактически, это означает,
что при каждой итерации цикла происходит обращение к итератору, содержащемуся в строке/списке,
с требованием выдать следующий элемент"""