# Взято из викиучебник Python ru.wikibooks.org/wiki/Python/Учебник_Python_3.1
# Кортежи_и_последовательности


for x in range(1, 11):
     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
     # Обратите внимание на использование end в предыдущей строке т.е. каретка не переводится
     print(repr(x*x*x).rjust(4))      # а здесь по умолчанию стоит \n и каретка переводится  и
                                    # следующее значение выводится с новой строки

#       1   1    1
#       2   4    8
#       3   9   27
#       4  16   64
#       5  25  125
#       6  36  216
#       7  49  343
#       8  64  512
#       9  81  729
#       10 100 1000

"""(Обратите внимание, что в первом примере единичные пробелы между колонками добавлены функцией print():
 она всегда вставляет пробелы между своими параметрами)
 Этот пример демонстрирует работу метода строковых объектов rjust(),
 выравнивающего строку по правому краю в поле переданной ширины, отступая пробелами слева.
 Имеются также похожие методы ljust() и center(). Эти методы не выводят ничего, они лишь возвращают новую строку.
 Если строка на входе чересчур длинная, то они не усекают её, что обычно является меньшим из зол.
 (Для усечения можно добавить операцию среза, например: x.ljust(n)[:n].)
 Есть другой метод — zfill(), который заполняет нулями пространство слева от числовой строки.
 Он распознаёт знаки плюс и минус:"""

print('\n')   # Просто для пробела

for x in range(1, 11):
         print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))

#       1   1    1
#       2   4    8
#       3   9   27
#       4  16   64
#       5  25  125
#       6  36  216
#       7  49  343
#       8  64  512
#       9  81  729
#       10 100 1000




print('\n')   # Просто для пробела

print('12'.zfill(8))
print('-3.14'.zfill(12))
print('3.14159265359'.zfill(20))

#   00000012
#   -00000003.14
#   00000003.14159265359



print('\n')   # Просто для пробела



table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
for name, phone in table.items():
    print('{0:10} ==> {1:10d}'.format(name, phone))

#   Jack       ==>       4098
#   Sjoerd     ==>       4127
#   Dcab       ==>       7678